# This file was autogenerated from the template: parameters.py.template (2022-10-10 15:53:29).

import sys
import os
import numpy as np
import sympy as sp

import tabulate as tab


#link to documentation with examples: https://ackrep-doc.readthedocs.io/en/latest/devdoc/contributing_data.html


# set model name
model_name = 'Turbo-Generator'


# ---------- create symbolic parameters
A = sp.MatrixSymbol('A', 10, 10)
B = sp.MatrixSymbol('B', 10, 2)
B1 = sp.MatrixSymbol('B1', 10, 10)
C1 = sp.MatrixSymbol('C1', 10, 10)
C = sp.MatrixSymbol('C', 2, 10)
D11 = sp.MatrixSymbol('D11', 10, 10)
D12 = sp.MatrixSymbol('D12', 10, 2)
D21 = sp.MatrixSymbol('D21', 2, 10)

pp_symb = [A, B, B1, C1, C, D11, D12, D21]


# ---------- create auxiliary symbolic parameters 

# set numerical values of auxiliary parameters
# trailing "_nv" stands for "numerical value"
A_nv = sp.Matrix(np.array([[ 0.00000e+00,  1.00000e+00,  0.00000e+00,  0.00000e+00,
         0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
         0.00000e+00,  0.00000e+00],
       [ 0.00000e+00, -1.13230e-01, -9.81090e-01, -1.18470e+01,
        -1.18470e+01, -6.30800e+01, -3.43390e+01, -3.43390e+01,
        -2.76450e+01,  0.00000e+00],
       [ 3.24121e+02, -1.17550e+00, -2.91010e+01,  1.27220e-01,
         2.83448e+00, -9.67730e+02, -6.78140e+02, -6.78140e+02,
         0.00000e+00, -1.29290e+02],
       [-1.27300e+02,  4.61670e-01,  1.14294e+01, -1.03790e+00,
         1.31237e+01,  3.80079e+02,  2.66341e+02,  2.66341e+02,
         0.00000e+00,  1.05485e+03],
       [-1.86050e+02,  6.74750e-01,  1.67045e+01,  8.60920e-01,
        -1.70680e+01,  5.55502e+02,  3.89268e+02,  3.89268e+02,
         0.00000e+00, -8.74920e+02],
       [ 3.41917e+02,  1.09173e+00,  1.05275e+03,  7.56465e+02,
         7.56465e+02, -2.97740e+01,  1.65070e-01,  3.27626e+00,
         0.00000e+00,  0.00000e+00],
       [-3.07480e+01, -9.81700e-02, -9.46740e+01, -6.80290e+01,
        -6.80290e+01,  2.67753e+00, -2.65580e+00,  4.88497e+00,
         0.00000e+00,  0.00000e+00],
       [-3.02360e+02, -9.65430e-01, -9.30960e+02, -6.68950e+02,
        -6.68950e+02,  2.63292e+01,  2.42028e+00, -9.56030e+00,
         0.00000e+00,  0.00000e+00],
       [ 0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
         0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
        -1.66670e+00,  0.00000e+00],
       [ 0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
         0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
         0.00000e+00, -1.00000e+01]]))
B_nv = sp.Matrix(np.array([[ 0.    ,  0.    ],
       [ 0.    ,  0.    ],
       [ 0.    ,  0.    ],
       [ 0.    ,  0.    ],
       [ 0.    ,  0.    ],
       [ 0.    ,  0.    ],
       [ 0.    ,  0.    ],
       [ 0.    ,  0.    ],
       [ 1.6667,  0.    ],
       [ 0.    , 10.    ]]))
B1_nv = sp.Matrix(np.array([[ 0.    ,  0.    ],
       [ 0.    ,  0.    ],
       [ 0.    ,  0.    ],
       [ 0.    ,  0.    ],
       [ 0.    ,  0.    ],
       [ 0.    ,  0.    ],
       [ 0.    ,  0.    ],
       [ 0.    ,  0.    ],
       [ 1.6667,  0.    ],
       [ 0.    , 10.    ]]))
C1_nv = sp.Matrix(np.array([[1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 1.]]))
C_nv = sp.Matrix(np.array([[ 1.     ,  0.     ,  0.     ,  0.     ,  0.     ,  0.     ,
         0.     ,  0.     ,  0.     ,  0.     ],
       [-0.49134,  0.     , -0.63203,  0.     ,  0.     , -0.20743,
         0.     ,  0.     ,  0.     ,  0.     ]]))
D11_nv = sp.Matrix(np.array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]))
D12_nv = sp.Matrix(np.array([[0., 0.],
       [0., 0.],
       [0., 0.],
       [0., 0.],
       [0., 0.],
       [0., 0.],
       [0., 0.],
       [0., 0.],
       [1., 0.],
       [0., 1.]]))
D21_nv = sp.Matrix(np.array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]))


# ---------- create symbolic parameter functions
# parameter values can be constant/fixed values OR set in relation to other parameters (for example: a = 2*b)  


# list of symbolic parameter functions
# tailing "_sf" stands for "symbolic parameter function"
pp_sf = [A_nv, B_nv, B1_nv, C1_nv, C_nv, D11_nv, D12_nv, D21_nv]


#  ---------- list for substitution
# -- entries are tuples like: (independent symbolic parameter, numerical value)
pp_subs_list = []


# OPTONAL: Dictionary which defines how certain variables shall be written
# in the table - key: Symbolic Variable, Value: LaTeX Representation/Code
# useful for example for complex variables: {Z: r"\underline{Z}"}
latex_names = {}


# ---------- Define LaTeX table

# Define table header 
# DON'T CHANGE FOLLOWING ENTRIES: "Symbol", "Value"
tabular_header = ["Symbol", "Value"]

# Define column text alignments
col_alignment = ["center", "left"]


# Define Entries of all columns before the Symbol-Column
# --- Entries need to be latex code
col_1 = [] 

# contains all lists of the columns before the "Symbol" Column
# --- Empty list, if there are no columns before the "Symbol" Column
start_columns_list = []


# Define Entries of the columns after the Value-Column
# --- Entries need to be latex code
col_4 = []

# contains all lists of columns after the FIX ENTRIES
# --- Empty list, if there are no columns after the "Value" column
end_columns_list = []