# This file was autogenerated from the template: parameters.py.template (2022-10-10 15:57:36).

import sys
import os
import numpy as np
import sympy as sp

import tabulate as tab


#link to documentation with examples: https://ackrep-doc.readthedocs.io/en/latest/devdoc/contributing_data.html


# set model name
model_name = 'Plate Experiment for the active vibration damping of large flexible space structures, example of order 10'


# ---------- create symbolic parameters
A = sp.MatrixSymbol('A', 10, 10)
B = sp.MatrixSymbol('B', 10, 2)
B1 = sp.MatrixSymbol('B1', 10, 2)
C1 = sp.MatrixSymbol('C1', 2, 10)
C = sp.MatrixSymbol('C', 2, 10)
D11 = sp.MatrixSymbol('D11', 2, 2)
D12 = sp.MatrixSymbol('D12', 2, 2)
D21 = sp.MatrixSymbol('D21', 2, 2)

pp_symb = [A, B, B1, C1, C, D11, D12, D21]


# ---------- create auxiliary symbolic parameters 

# set numerical values of auxiliary parameters
# trailing "_nv" stands for "numerical value"
A_nv = sp.Matrix(np.array([[ 0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
         0.000000e+00,  1.000000e+00,  0.000000e+00,  0.000000e+00,
         0.000000e+00,  0.000000e+00],
       [ 0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
         0.000000e+00,  0.000000e+00,  1.000000e+00,  0.000000e+00,
         0.000000e+00,  0.000000e+00],
       [ 0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
         0.000000e+00,  0.000000e+00,  0.000000e+00,  1.000000e+00,
         0.000000e+00,  0.000000e+00],
       [ 0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
         0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
         1.000000e+00,  0.000000e+00],
       [ 0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
         0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
         0.000000e+00,  1.000000e+00],
       [-8.426800e+00,  0.000000e+00,  9.655700e+00,  0.000000e+00,
        -5.083000e+00, -2.530000e-02,  0.000000e+00,  1.550000e-02,
         0.000000e+00, -1.120000e-02],
       [ 0.000000e+00, -2.020220e+01,  0.000000e+00,  2.007360e+01,
         0.000000e+00,  0.000000e+00, -2.440000e-02,  0.000000e+00,
         1.510000e-02,  0.000000e+00],
       [-2.394250e+01,  0.000000e+00, -1.073540e+01,  0.000000e+00,
        -1.470685e+02, -4.900000e-03,  0.000000e+00, -3.590000e-02,
         0.000000e+00, -8.490000e-02],
       [ 0.000000e+00,  1.261547e+02,  0.000000e+00, -1.328028e+02,
         0.000000e+00,  0.000000e+00,  9.470000e-02,  0.000000e+00,
        -1.089000e-01,  0.000000e+00],
       [-3.990500e+01,  0.000000e+00,  6.607000e+00,  0.000000e+00,
        -1.884411e+02, -2.470000e-02,  0.000000e+00,  1.600000e-03,
         0.000000e+00, -1.368000e-01]]))
B_nv = sp.Matrix(np.array([[ 0.    ,  0.    ],
       [ 0.    ,  0.    ],
       [ 0.    ,  0.    ],
       [ 0.    ,  0.    ],
       [ 0.    ,  0.    ],
       [-0.001 , -0.001 ],
       [-0.0133,  0.0133],
       [ 0.048 ,  0.048 ],
       [-0.0516,  0.0516],
       [ 0.0213,  0.0213]]))
B1_nv = sp.Matrix(np.array([[ 0.    ,  0.    ],
       [ 0.    ,  0.    ],
       [ 0.    ,  0.    ],
       [ 0.    ,  0.    ],
       [ 0.    ,  0.    ],
       [-0.001 , -0.001 ],
       [-0.0133,  0.0133],
       [ 0.048 ,  0.048 ],
       [-0.0516,  0.0516],
       [ 0.0213,  0.0213]]))
C1_nv = sp.Matrix(np.array([[ 0.    ,  1.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,
         0.    ,  0.    ,  0.    ],
       [-0.8084,  0.    ,  0.7509,  0.    , -0.9501,  0.    ,  0.    ,
         0.    ,  0.    ,  0.    ]]))
C_nv = sp.Matrix(np.array([[ 0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.0115, -0.0536,
         0.9713, -0.2009, -0.5746],
       [ 0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.0115,  0.0536,
         0.9713,  0.2009, -0.5746]]))
D11_nv = sp.Matrix(np.array([[0., 0.],
       [0., 0.]]))
D12_nv = sp.Matrix(np.array([[1., 0.],
       [0., 1.]]))
D21_nv = sp.Matrix(np.array([[0.    , 0.    ],
       [0.0972, 0.7509]]))


# ---------- create symbolic parameter functions
# parameter values can be constant/fixed values OR set in relation to other parameters (for example: a = 2*b)  


# list of symbolic parameter functions
# tailing "_sf" stands for "symbolic parameter function"
pp_sf = [A_nv, B_nv, B1_nv, C1_nv, C_nv, D11_nv, D12_nv, D21_nv]


#  ---------- list for substitution
# -- entries are tuples like: (independent symbolic parameter, numerical value)
pp_subs_list = []


# OPTONAL: Dictionary which defines how certain variables shall be written
# in the table - key: Symbolic Variable, Value: LaTeX Representation/Code
# useful for example for complex variables: {Z: r"\underline{Z}"}
latex_names = {}


# ---------- Define LaTeX table

# Define table header 
# DON'T CHANGE FOLLOWING ENTRIES: "Symbol", "Value"
tabular_header = ["Symbol", "Value"]

# Define column text alignments
col_alignment = ["center", "left"]


# Define Entries of all columns before the Symbol-Column
# --- Entries need to be latex code
col_1 = [] 

# contains all lists of the columns before the "Symbol" Column
# --- Empty list, if there are no columns before the "Symbol" Column
start_columns_list = []


# Define Entries of the columns after the Value-Column
# --- Entries need to be latex code
col_4 = []

# contains all lists of columns after the FIX ENTRIES
# --- Empty list, if there are no columns after the "Value" column
end_columns_list = []