# This file was autogenerated from the template: simulation.py.template (2022-10-10 15:57:37).

import numpy as np
import system_model
from scipy.integrate import solve_ivp, odeint

from ackrep_core import ResultContainer
from ackrep_core.system_model_management import save_plot_in_dir
import matplotlib.pyplot as plt
import os
from ipydex import Container

# link to documentation with examples: https://ackrep-doc.readthedocs.io/en/latest/devdoc/contributing_data.html


def simulate():
    """
    simulate the system model with scipy.integrate.solve_ivp

    :return: result of solve_ivp, might contains input function
    """

    model = system_model.Model()

    rhs_xx_pp_symb = model.get_rhs_symbolic()
    rhs = model.get_rhs_func()

    # initial state values
    xx0 = np.ones(model.sys_dim)

    t_end = 10
    tt = np.linspace(0, t_end, 1000)

    simulation_data = solve_ivp(rhs, (0, t_end), xx0, t_eval=tt)

    # using odeint for models with large state vectors
    # res = odeint(rhs, y0=xx0, t=tt, tfirst=True)
    # simulation_data = Container()
    # simulation_data.y = res.transpose()
    # simulation_data.t = tt

    # postprocessing: calc output
    ny = 2
    C = model.get_parameter_value("C")
    D21 = model.get_parameter_value("D21")
    output = np.zeros((ny, len(tt)))
    for i in range(len(tt)):
        output[:,i] = np.matmul(C, simulation_data.y[:,i]) # + np.matmul(D21, w)
    simulation_data.output = output

    save_plot(simulation_data)

    return simulation_data


def save_plot(simulation_data):
    """
    plot your data and save the plot
    access to data via: simulation_data.t   array of time values
                        simulation_data.y   array of data components
                        simulation_data.uu  array of input values

    :param simulation_data: simulation_data of system_model
    :return: None
    """

    for i in range(simulation_data.output.shape[0]):
        plt.plot(simulation_data.t, simulation_data.output[i], label=f"$y_{i}$")

    plt.legend()
    plt.tight_layout()

    save_plot_in_dir()


def evaluate_simulation(simulation_data):
    """
    assert that the simulation results are as expected

    :param simulation_data: simulation_data of system_model
    :return:
    """
    expected_final_state = np.array([-1.30536565e+00,  9.39559776e-02, -4.05886861e-01, -4.19803171e-01,
       -4.96150118e-01, -6.00312256e-02,  2.11699878e-01,  2.34455256e-02,
        8.77194491e-02, -4.92084356e-02, -1.25297647e-02, -8.98890907e-04,
        1.50758410e-02,  3.60165239e-03, -6.64936291e-03, -5.28956453e-03,
        2.37386301e-03, -1.32426115e-03,  7.52496957e-04, -1.06850011e-03,
       -3.44821749e-01, -1.64767066e+00,  3.35899154e+00,  4.24962056e+00,
       -1.61270602e+00,  6.77158086e+00,  1.96089152e+00,  5.22622896e+00,
        6.97539726e-01, -3.29191603e+00,  3.21114854e+00,  2.12398548e+00,
       -1.21695592e+00, -8.66723707e-01,  2.38077276e-01, -2.97369689e-01,
        1.78032734e-01,  1.32692003e-01, -1.69427780e-01, -1.21475772e-01])

    rc = ResultContainer(score=1.0)
    simulated_final_state = simulation_data.y[:, -1]
    rc.final_state_errors = [
        simulated_final_state[i] - expected_final_state[i] for i in np.arange(0, len(simulated_final_state))
    ]
    rc.success = np.allclose(expected_final_state, simulated_final_state, rtol=0, atol=1e-2)

    return rc