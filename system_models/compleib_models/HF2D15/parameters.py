# This file was autogenerated from the template: parameters.py.template (2022-10-10 15:54:06).

import sys
import os
import numpy as np
import sympy as sp

import tabulate as tab


#link to documentation with examples: https://ackrep-doc.readthedocs.io/en/latest/devdoc/contributing_data.html


# set model name
model_name = '2D heat flow example, rectangular domain with perturbation operator added thermal properties of of platinum, sd=1.725'


# ---------- create symbolic parameters
A = sp.MatrixSymbol('A', 5, 5)
B = sp.MatrixSymbol('B', 5, 2)
B1 = sp.MatrixSymbol('B1', 5, 5)
C1 = sp.MatrixSymbol('C1', 7, 5)
C = sp.MatrixSymbol('C', 4, 5)
D11 = sp.MatrixSymbol('D11', 7, 5)
D12 = sp.MatrixSymbol('D12', 7, 2)
D21 = sp.MatrixSymbol('D21', 4, 5)

pp_symb = [A, B, B1, C1, C, D11, D12, D21]


# ---------- create auxiliary symbolic parameters 

# set numerical values of auxiliary parameters
# trailing "_nv" stands for "numerical value"
A_nv = sp.Matrix(np.array([[ 1.55930081e+00,  8.75946889e-03, -2.51700324e+00,
        -4.50879506e+00,  7.66371654e+00],
       [-2.02106547e-02, -1.70635096e+00,  1.08442324e+00,
         7.62818423e-01, -2.24829557e+00],
       [-5.80456216e-03,  4.85547335e-01, -1.54359180e+01,
        -1.91752016e+01,  2.82038309e+01],
       [-7.66403080e-03, -3.95177422e-01, -1.37106661e+01,
        -2.63344389e+01,  4.12134508e+01],
       [ 5.91650866e-03, -1.52791057e-01,  1.77049787e+01,
         3.97414112e+01, -7.73393103e+01]]))
B_nv = sp.Matrix(np.array([[ -8.44778301,  -6.26213862],
       [-14.06082484,  -0.2555754 ],
       [-11.55631954, -14.08662439],
       [-14.26951599,  -4.74728423],
       [  8.25307488,  15.19013786]]))
B1_nv = sp.Matrix(np.array([[ -8.44778301,  -6.26213862],
       [-14.06082484,  -0.2555754 ],
       [-11.55631954, -14.08662439],
       [-14.26951599,  -4.74728423],
       [  8.25307488,  15.19013786]]))
C1_nv = sp.Matrix(np.array([[2.23606798, 0.        , 0.        , 0.        , 0.        ],
       [0.        , 2.23606798, 0.        , 0.        , 0.        ],
       [0.        , 0.        , 2.23606798, 0.        , 0.        ],
       [0.        , 0.        , 0.        , 2.23606798, 0.        ],
       [0.        , 0.        , 0.        , 0.        , 2.23606798],
       [0.        , 0.        , 0.        , 0.        , 0.        ],
       [0.        , 0.        , 0.        , 0.        , 0.        ]]))
C_nv = sp.Matrix(np.array([[ 0.61730526, -0.67652392,  0.06089817,  0.21996878, -0.50368429],
       [ 0.50303302,  0.96379324, -0.14946079,  1.06817634,  0.52413875],
       [ 0.41662273,  0.66651002,  1.94857582,  0.59887857, -0.79159126],
       [ 0.54644356, -0.59707097,  1.41857158,  0.59137514, -1.06270979]]))
D11_nv = sp.Matrix(np.array([[0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]]))
D12_nv = sp.Matrix(np.array([[0., 0.],
       [0., 0.],
       [0., 0.],
       [0., 0.],
       [0., 0.],
       [5., 0.],
       [0., 5.]]))
D21_nv = sp.Matrix(np.array([[0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]]))


# ---------- create symbolic parameter functions
# parameter values can be constant/fixed values OR set in relation to other parameters (for example: a = 2*b)  


# list of symbolic parameter functions
# tailing "_sf" stands for "symbolic parameter function"
pp_sf = [A_nv, B_nv, B1_nv, C1_nv, C_nv, D11_nv, D12_nv, D21_nv]


#  ---------- list for substitution
# -- entries are tuples like: (independent symbolic parameter, numerical value)
pp_subs_list = []


# OPTONAL: Dictionary which defines how certain variables shall be written
# in the table - key: Symbolic Variable, Value: LaTeX Representation/Code
# useful for example for complex variables: {Z: r"\underline{Z}"}
latex_names = {}


# ---------- Define LaTeX table

# Define table header 
# DON'T CHANGE FOLLOWING ENTRIES: "Symbol", "Value"
tabular_header = ["Symbol", "Value"]

# Define column text alignments
col_alignment = ["center", "left"]


# Define Entries of all columns before the Symbol-Column
# --- Entries need to be latex code
col_1 = [] 

# contains all lists of the columns before the "Symbol" Column
# --- Empty list, if there are no columns before the "Symbol" Column
start_columns_list = []


# Define Entries of the columns after the Value-Column
# --- Entries need to be latex code
col_4 = []

# contains all lists of columns after the FIX ENTRIES
# --- Empty list, if there are no columns after the "Value" column
end_columns_list = []