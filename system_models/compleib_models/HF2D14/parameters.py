# This file was autogenerated from the template: parameters.py.template (2022-10-10 15:54:06).

import sys
import os
import numpy as np
import sympy as sp

import tabulate as tab


#link to documentation with examples: https://ackrep-doc.readthedocs.io/en/latest/devdoc/contributing_data.html


# set model name
model_name = '2D heat flow example, rectangular domain with perturbation operator added thermal properties of copper, sd=0.3825'


# ---------- create symbolic parameters
A = sp.MatrixSymbol('A', 5, 5)
B = sp.MatrixSymbol('B', 5, 2)
B1 = sp.MatrixSymbol('B1', 5, 5)
C1 = sp.MatrixSymbol('C1', 7, 5)
C = sp.MatrixSymbol('C', 4, 5)
D11 = sp.MatrixSymbol('D11', 7, 5)
D12 = sp.MatrixSymbol('D12', 7, 2)
D21 = sp.MatrixSymbol('D21', 4, 5)

pp_symb = [A, B, B1, C1, C, D11, D12, D21]


# ---------- create auxiliary symbolic parameters 

# set numerical values of auxiliary parameters
# trailing "_nv" stands for "numerical value"
A_nv = sp.Matrix(np.array([[  0.20809659,  -0.17049839,  -0.32570639,   0.82816516,
          0.92282316],
       [ -0.10564993,  -0.95746876,  -0.51439036,   1.42894726,
          1.21506986],
       [ -0.07816628,  -0.64773717,  -3.84933057,   5.23252442,
          5.14873585],
       [  0.1205015 ,   1.32631384,   3.69011331, -12.41353322,
        -13.43550989],
       [  0.09871192,   1.08092414,   3.17514969, -13.23616651,
        -18.75787733]]))
B_nv = sp.Matrix(np.array([[  6.28664148,  10.5158513 ],
       [ 13.68830678,  18.73761852],
       [  7.25056546,  33.04902119],
       [-13.95388663, -37.10433371],
       [ -3.89071137, -43.82686337]]))
B1_nv = sp.Matrix(np.array([[  6.28664148,  10.5158513 ],
       [ 13.68830678,  18.73761852],
       [  7.25056546,  33.04902119],
       [-13.95388663, -37.10433371],
       [ -3.89071137, -43.82686337]]))
C1_nv = sp.Matrix(np.array([[2.23606798, 0.        , 0.        , 0.        , 0.        ],
       [0.        , 2.23606798, 0.        , 0.        , 0.        ],
       [0.        , 0.        , 2.23606798, 0.        , 0.        ],
       [0.        , 0.        , 0.        , 2.23606798, 0.        ],
       [0.        , 0.        , 0.        , 0.        , 2.23606798],
       [0.        , 0.        , 0.        , 0.        , 0.        ],
       [0.        , 0.        , 0.        , 0.        , 0.        ]]))
C_nv = sp.Matrix(np.array([[-0.85339144,  0.67770669, -0.16005949, -0.13521718,  0.88347829],
       [-0.66550978, -0.99536403,  0.35611935,  1.05149715, -1.22192327],
       [-0.31431134, -1.08145255, -2.24473503,  2.19641087,  1.45127024],
       [-0.43754307, -0.23971475, -2.17463289,  1.54668325,  1.44064207]]))
D11_nv = sp.Matrix(np.array([[0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]]))
D12_nv = sp.Matrix(np.array([[0.        , 0.        ],
       [0.        , 0.        ],
       [0.        , 0.        ],
       [0.        , 0.        ],
       [0.        , 0.        ],
       [7.07106781, 0.        ],
       [0.        , 7.07106781]]))
D21_nv = sp.Matrix(np.array([[0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]]))


# ---------- create symbolic parameter functions
# parameter values can be constant/fixed values OR set in relation to other parameters (for example: a = 2*b)  


# list of symbolic parameter functions
# tailing "_sf" stands for "symbolic parameter function"
pp_sf = [A_nv, B_nv, B1_nv, C1_nv, C_nv, D11_nv, D12_nv, D21_nv]


#  ---------- list for substitution
# -- entries are tuples like: (independent symbolic parameter, numerical value)
pp_subs_list = []


# OPTONAL: Dictionary which defines how certain variables shall be written
# in the table - key: Symbolic Variable, Value: LaTeX Representation/Code
# useful for example for complex variables: {Z: r"\underline{Z}"}
latex_names = {}


# ---------- Define LaTeX table

# Define table header 
# DON'T CHANGE FOLLOWING ENTRIES: "Symbol", "Value"
tabular_header = ["Symbol", "Value"]

# Define column text alignments
col_alignment = ["center", "left"]


# Define Entries of all columns before the Symbol-Column
# --- Entries need to be latex code
col_1 = [] 

# contains all lists of the columns before the "Symbol" Column
# --- Empty list, if there are no columns before the "Symbol" Column
start_columns_list = []


# Define Entries of the columns after the Value-Column
# --- Entries need to be latex code
col_4 = []

# contains all lists of columns after the FIX ENTRIES
# --- Empty list, if there are no columns after the "Value" column
end_columns_list = []