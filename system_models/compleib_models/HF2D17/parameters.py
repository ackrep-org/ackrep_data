# This file was autogenerated from the template: parameters.py.template (2022-10-10 15:54:06).

import sys
import os
import numpy as np
import sympy as sp

import tabulate as tab


#link to documentation with examples: https://ackrep-doc.readthedocs.io/en/latest/devdoc/contributing_data.html


# set model name
model_name = '2D heat flow example, rectangular domain with perturbation operator added and extended to a nonlinear model thermal properties of of platinum'


# ---------- create symbolic parameters
A = sp.MatrixSymbol('A', 5, 5)
B = sp.MatrixSymbol('B', 5, 2)
B1 = sp.MatrixSymbol('B1', 5, 5)
C1 = sp.MatrixSymbol('C1', 7, 5)
C = sp.MatrixSymbol('C', 4, 5)
D11 = sp.MatrixSymbol('D11', 7, 5)
D12 = sp.MatrixSymbol('D12', 7, 2)
D21 = sp.MatrixSymbol('D21', 4, 5)

pp_symb = [A, B, B1, C1, C, D11, D12, D21]


# ---------- create auxiliary symbolic parameters 

# set numerical values of auxiliary parameters
# trailing "_nv" stands for "numerical value"
A_nv = sp.Matrix(np.array([[  0.47627191,   0.38458461,   0.24093154,  -0.39649958,
          0.73368005],
       [  0.84491336,  -4.10923952,   3.12852652,  -6.49507883,
          5.96145867],
       [ -0.63480306,   2.63625748,  -9.1702947 ,  11.36758652,
         -9.9151713 ],
       [  0.98212173,  -5.0296084 ,  10.48807066, -29.66767663,
         15.01598811],
       [ -0.87400784,   4.59926666,  -8.88136137,  14.37690413,
        -22.22588255]]))
B_nv = sp.Matrix(np.array([[  5.499389  ,   3.73604615],
       [ 15.36821101,   9.40988581],
       [  4.27736718, -11.54020077],
       [  9.45658385,   5.58327772],
       [-17.93444416, -10.53826239]]))
B1_nv = sp.Matrix(np.array([[  5.499389  ,   3.73604615],
       [ 15.36821101,   9.40988581],
       [  4.27736718, -11.54020077],
       [  9.45658385,   5.58327772],
       [-17.93444416, -10.53826239]]))
C1_nv = sp.Matrix(np.array([[5., 0., 0., 0., 0.],
       [0., 5., 0., 0., 0.],
       [0., 0., 5., 0., 0.],
       [0., 0., 0., 5., 0.],
       [0., 0., 0., 0., 5.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]]))
C_nv = sp.Matrix(np.array([[-0.68873762,  0.41417579,  0.35790338,  0.29935531, -0.07120764],
       [-0.38137002, -0.79831924, -0.34387174, -1.68974078,  0.59811906],
       [-0.26878628, -0.90692993, -0.19824055,  1.34307675,  1.65611271],
       [-0.37732286, -0.70727663,  2.12529253, -0.78675288,  0.5913502 ]]))
D11_nv = sp.Matrix(np.array([[0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]]))
D12_nv = sp.Matrix(np.array([[0., 0.],
       [0., 0.],
       [0., 0.],
       [0., 0.],
       [0., 0.],
       [5., 0.],
       [0., 5.]]))
D21_nv = sp.Matrix(np.array([[0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]]))


# ---------- create symbolic parameter functions
# parameter values can be constant/fixed values OR set in relation to other parameters (for example: a = 2*b)  


# list of symbolic parameter functions
# tailing "_sf" stands for "symbolic parameter function"
pp_sf = [A_nv, B_nv, B1_nv, C1_nv, C_nv, D11_nv, D12_nv, D21_nv]


#  ---------- list for substitution
# -- entries are tuples like: (independent symbolic parameter, numerical value)
pp_subs_list = []


# OPTONAL: Dictionary which defines how certain variables shall be written
# in the table - key: Symbolic Variable, Value: LaTeX Representation/Code
# useful for example for complex variables: {Z: r"\underline{Z}"}
latex_names = {}


# ---------- Define LaTeX table

# Define table header 
# DON'T CHANGE FOLLOWING ENTRIES: "Symbol", "Value"
tabular_header = ["Symbol", "Value"]

# Define column text alignments
col_alignment = ["center", "left"]


# Define Entries of all columns before the Symbol-Column
# --- Entries need to be latex code
col_1 = [] 

# contains all lists of the columns before the "Symbol" Column
# --- Empty list, if there are no columns before the "Symbol" Column
start_columns_list = []


# Define Entries of the columns after the Value-Column
# --- Entries need to be latex code
col_4 = []

# contains all lists of columns after the FIX ENTRIES
# --- Empty list, if there are no columns after the "Value" column
end_columns_list = []