# This file was autogenerated from the template: simulation.py.template (2022-10-10 15:55:38).

import numpy as np
import system_model
from scipy.integrate import solve_ivp, odeint

from ackrep_core import ResultContainer
from ackrep_core.system_model_management import save_plot_in_dir
import matplotlib.pyplot as plt
import os
from ipydex import Container

# link to documentation with examples: https://ackrep-doc.readthedocs.io/en/latest/devdoc/contributing_data.html


def simulate():
    """
    simulate the system model with scipy.integrate.solve_ivp

    :return: result of solve_ivp, might contains input function
    """

    model = system_model.Model()

    rhs_xx_pp_symb = model.get_rhs_symbolic()
    rhs = model.get_rhs_func()

    # initial state values
    xx0 = np.ones(model.sys_dim)

    t_end = 10
    tt = np.linspace(0, t_end, 1000)

    simulation_data = solve_ivp(rhs, (0, t_end), xx0, t_eval=tt)

    # using odeint for models with large state vectors
    # res = odeint(rhs, y0=xx0, t=tt, tfirst=True)
    # simulation_data = Container()
    # simulation_data.y = res.transpose()
    # simulation_data.t = tt

    # postprocessing: calc output
    ny = 2
    C = model.get_parameter_value("C")
    D21 = model.get_parameter_value("D21")
    output = np.zeros((ny, len(tt)))
    for i in range(len(tt)):
        output[:,i] = np.matmul(C, simulation_data.y[:,i]) # + np.matmul(D21, w)
    simulation_data.output = output

    save_plot(simulation_data)

    return simulation_data


def save_plot(simulation_data):
    """
    plot your data and save the plot
    access to data via: simulation_data.t   array of time values
                        simulation_data.y   array of data components
                        simulation_data.uu  array of input values

    :param simulation_data: simulation_data of system_model
    :return: None
    """

    for i in range(simulation_data.output.shape[0]):
        plt.plot(simulation_data.t, simulation_data.output[i], label=f"$y_{i}$")

    plt.legend()
    plt.tight_layout()

    save_plot_in_dir()


def evaluate_simulation(simulation_data):
    """
    assert that the simulation results are as expected

    :param simulation_data: simulation_data of system_model
    :return:
    """
    expected_final_state = np.array([ 0.01207624, -0.13492355, -0.32936458, -0.46610571, -0.42398212,
       -0.39047412, -0.56846631, -0.80994763, -0.97399933, -0.90045424,
       -0.85526318, -0.99698742, -1.20322352, -1.38010833, -1.48848783,
       -1.59109267, -1.63703334, -1.55743944, -1.61551417, -1.8445741 ,
       -2.11981326, -2.32554924, -2.47334724, -2.65201334, -2.64891969,
       -2.48236355, -2.46672362, -2.44719116, -2.21099356, -2.23449385,
       -2.04258435, -1.27996361,  1.58089398,  2.0390397 ,  0.62695446,
       -0.98099636, -0.04267307,  0.47500218,  0.92127981,  1.15181121,
        2.21564633,  2.12998222, -1.44585034, -1.14112192,  0.50499958,
        4.32230072,  3.37499646,  0.793958  ,  2.23085092,  0.45587773,
       -1.17997268, -0.6813359 ,  1.81535603,  3.39961798,  3.06844998,
        3.89660687,  4.59208669,  2.73809837,  0.88755631, -0.14420534])

    rc = ResultContainer(score=1.0)
    simulated_final_state = simulation_data.y[:, -1]
    rc.final_state_errors = [
        simulated_final_state[i] - expected_final_state[i] for i in np.arange(0, len(simulated_final_state))
    ]
    rc.success = np.allclose(expected_final_state, simulated_final_state, rtol=0, atol=1e-2)

    return rc