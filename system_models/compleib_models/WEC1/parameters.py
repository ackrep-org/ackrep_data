# This file was autogenerated from the template: parameters.py.template (2022-10-10 15:53:29).

import sys
import os
import numpy as np
import sympy as sp

import tabulate as tab


#link to documentation with examples: https://ackrep-doc.readthedocs.io/en/latest/devdoc/contributing_data.html


# set model name
model_name = 'Wind energy conversion system'


# ---------- create symbolic parameters
A = sp.MatrixSymbol('A', 10, 10)
B = sp.MatrixSymbol('B', 10, 3)
B1 = sp.MatrixSymbol('B1', 10, 10)
C1 = sp.MatrixSymbol('C1', 10, 10)
C = sp.MatrixSymbol('C', 4, 10)
D11 = sp.MatrixSymbol('D11', 10, 10)
D12 = sp.MatrixSymbol('D12', 10, 3)
D21 = sp.MatrixSymbol('D21', 4, 10)

pp_symb = [A, B, B1, C1, C, D11, D12, D21]


# ---------- create auxiliary symbolic parameters 

# set numerical values of auxiliary parameters
# trailing "_nv" stands for "numerical value"
A_nv = sp.Matrix(np.array([[-5.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
         0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00],
       [ 0.0000e+00,  0.0000e+00,  1.0000e+00,  0.0000e+00,  0.0000e+00,
         0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00],
       [-5.5005e+00, -1.4791e+03, -3.2812e+00, -1.7889e-02,  0.0000e+00,
         0.0000e+00,  1.6968e+02,  3.6137e+01,  3.6137e+01,  1.4483e+02],
       [ 0.0000e+00,  1.4164e+03,  3.1250e+00,  0.0000e+00,  0.0000e+00,
         0.0000e+00, -1.6968e+02, -3.6137e+01, -3.6137e+01, -1.4483e+02],
       [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  9.5493e-02, -1.0000e+01,
         0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00],
       [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
        -1.0000e+01,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00],
       [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  7.8416e+00,  0.0000e+00,
         1.1552e-01, -1.2571e+03,  1.0151e+03,  1.0111e+03,  4.9909e+02],
       [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  4.6042e+00,  0.0000e+00,
         2.0960e+00, -6.9313e+02,  5.5933e+02,  6.3131e+02,  3.0618e+02],
       [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  5.7968e+00,  0.0000e+00,
        -1.8671e+00, -9.7681e+02,  7.8851e+02,  7.0825e+02,  3.5508e+02],
       [ 0.0000e+00,  0.0000e+00,  0.0000e+00, -2.8663e+00,  0.0000e+00,
        -4.7856e-02,  4.1358e+02, -3.4335e+02, -3.4163e+02, -2.1245e+02]]))
B_nv = sp.Matrix(np.array([[   5.  ,    0.  ,    0.  ],
       [   0.  ,    0.  ,    0.  ],
       [   0.  ,    0.  ,    0.  ],
       [   0.  ,    0.  ,    0.  ],
       [   0.  ,    0.  ,    0.  ],
       [   0.  ,   10.  ,    0.  ],
       [   0.  ,    0.  , -305.65],
       [   0.  ,    0.  , -166.27],
       [   0.  ,    0.  , -239.88],
       [   0.  ,    0.  ,   96.02]]))
B1_nv = sp.Matrix(np.array([[   5.  ,    0.  ,    0.  ],
       [   0.  ,    0.  ,    0.  ],
       [   0.  ,    0.  ,    0.  ],
       [   0.  ,    0.  ,    0.  ],
       [   0.  ,    0.  ,    0.  ],
       [   0.  ,   10.  ,    0.  ],
       [   0.  ,    0.  , -305.65],
       [   0.  ,    0.  , -166.27],
       [   0.  ,    0.  , -239.88],
       [   0.  ,    0.  ,   96.02]]))
C1_nv = sp.Matrix(np.array([[1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 1.]]))
C_nv = sp.Matrix(np.array([[ 0.      ,  0.      ,  0.      ,  0.      ,  1.      ,  0.      ,
         0.      ,  0.      ,  0.      ,  0.      ],
       [ 0.      ,  0.      ,  0.      ,  0.      ,  0.      ,  0.      ,
         1.      ,  0.      ,  0.      ,  0.      ],
       [ 0.      ,  0.      ,  0.045455,  0.045455,  0.      ,  0.      ,
         0.      ,  0.      ,  0.      ,  0.      ],
       [ 0.      , 12.249   ,  0.027025,  0.      ,  0.      ,  0.      ,
         0.      ,  0.      ,  0.      ,  0.      ]]))
D11_nv = sp.Matrix(np.array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]))
D12_nv = sp.Matrix(np.array([[0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [1., 0., 0.],
       [0., 1., 0.],
       [0., 0., 1.]]))
D21_nv = sp.Matrix(np.array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]))


# ---------- create symbolic parameter functions
# parameter values can be constant/fixed values OR set in relation to other parameters (for example: a = 2*b)  


# list of symbolic parameter functions
# tailing "_sf" stands for "symbolic parameter function"
pp_sf = [A_nv, B_nv, B1_nv, C1_nv, C_nv, D11_nv, D12_nv, D21_nv]


#  ---------- list for substitution
# -- entries are tuples like: (independent symbolic parameter, numerical value)
pp_subs_list = []


# OPTONAL: Dictionary which defines how certain variables shall be written
# in the table - key: Symbolic Variable, Value: LaTeX Representation/Code
# useful for example for complex variables: {Z: r"\underline{Z}"}
latex_names = {}


# ---------- Define LaTeX table

# Define table header 
# DON'T CHANGE FOLLOWING ENTRIES: "Symbol", "Value"
tabular_header = ["Symbol", "Value"]

# Define column text alignments
col_alignment = ["center", "left"]


# Define Entries of all columns before the Symbol-Column
# --- Entries need to be latex code
col_1 = [] 

# contains all lists of the columns before the "Symbol" Column
# --- Empty list, if there are no columns before the "Symbol" Column
start_columns_list = []


# Define Entries of the columns after the Value-Column
# --- Entries need to be latex code
col_4 = []

# contains all lists of columns after the FIX ENTRIES
# --- Empty list, if there are no columns after the "Value" column
end_columns_list = []