# This file was autogenerated from the template: simulation.py.template (2022-10-10 15:53:56).

import numpy as np
import system_model
from scipy.integrate import solve_ivp, odeint

from ackrep_core import ResultContainer
from ackrep_core.system_model_management import save_plot_in_dir
import matplotlib.pyplot as plt
import os
from ipydex import Container

# link to documentation with examples: https://ackrep-doc.readthedocs.io/en/latest/devdoc/contributing_data.html


def simulate():
    """
    simulate the system model with scipy.integrate.solve_ivp

    :return: result of solve_ivp, might contains input function
    """

    model = system_model.Model()

    rhs_xx_pp_symb = model.get_rhs_symbolic()
    rhs = model.get_rhs_func()

    # initial state values
    xx0 = np.ones(model.sys_dim)

    t_end = 10
    tt = np.linspace(0, t_end, 1000)

    simulation_data = solve_ivp(rhs, (0, t_end), xx0, t_eval=tt)

    # using odeint for models with large state vectors
    # res = odeint(rhs, y0=xx0, t=tt, tfirst=True)
    # simulation_data = Container()
    # simulation_data.y = res.transpose()
    # simulation_data.t = tt

    # postprocessing: calc output
    ny = 1
    C = model.get_parameter_value("C")
    D21 = model.get_parameter_value("D21")
    output = np.zeros((ny, len(tt)))
    for i in range(len(tt)):
        output[:,i] = np.matmul(C, simulation_data.y[:,i]) # + np.matmul(D21, w)
    simulation_data.output = output

    save_plot(simulation_data)

    return simulation_data


def save_plot(simulation_data):
    """
    plot your data and save the plot
    access to data via: simulation_data.t   array of time values
                        simulation_data.y   array of data components
                        simulation_data.uu  array of input values

    :param simulation_data: simulation_data of system_model
    :return: None
    """

    for i in range(simulation_data.output.shape[0]):
        plt.plot(simulation_data.t, simulation_data.output[i], label=f"$y_{i}$")

    plt.legend()
    plt.tight_layout()

    save_plot_in_dir()


def evaluate_simulation(simulation_data):
    """
    assert that the simulation results are as expected

    :param simulation_data: simulation_data of system_model
    :return:
    """
    expected_final_state = np.array([-1.38309131e+00, -2.95050069e-01, -4.80657774e-01, -3.64737619e+00,
       -3.48737425e-01, -8.49396723e+00, -9.61899808e-01, -4.48636160e+00,
        2.02162019e-01,  2.45035710e+01, -2.57045070e-01, -3.48033361e+01,
        9.94227655e-01,  5.32420734e+00,  6.21215223e-01,  5.01530463e+01,
        8.55889231e-01,  4.18535181e+01,  5.69774729e-01, -8.20800770e+01,
       -8.84763493e-01,  5.57730533e+01,  4.06605302e-01, -1.30599235e+02,
        9.72501190e-01,  2.74689864e+01,  9.24494388e-01,  5.83959165e+01,
        7.03917471e-01, -1.43172141e+02, -9.18680543e-01, -2.79721231e+01,
        8.68286430e-01, -9.45439725e+01,  7.19146568e-01,  2.46411875e+02,
        1.60077778e+00,  1.45798663e+02, -4.37865510e+00, -1.54062103e+03])

    rc = ResultContainer(score=1.0)
    simulated_final_state = simulation_data.y[:, -1]
    rc.final_state_errors = [
        simulated_final_state[i] - expected_final_state[i] for i in np.arange(0, len(simulated_final_state))
    ]
    rc.success = np.allclose(expected_final_state, simulated_final_state, rtol=0, atol=1e-2)

    return rc