# This file was autogenerated from the template: parameters.py.template (2022-10-10 15:54:05).

import sys
import os
import numpy as np
import sympy as sp

import tabulate as tab


#link to documentation with examples: https://ackrep-doc.readthedocs.io/en/latest/devdoc/contributing_data.html


# set model name
model_name = '2D heat flow example, HF2D_JetControlExamples thermal properties of platinum, sd=0.5325'


# ---------- create symbolic parameters
A = sp.MatrixSymbol('A', 5, 5)
B = sp.MatrixSymbol('B', 5, 2)
B1 = sp.MatrixSymbol('B1', 5, 5)
C1 = sp.MatrixSymbol('C1', 7, 5)
C = sp.MatrixSymbol('C', 3, 5)
D11 = sp.MatrixSymbol('D11', 7, 5)
D12 = sp.MatrixSymbol('D12', 7, 2)
D21 = sp.MatrixSymbol('D21', 3, 5)

pp_symb = [A, B, B1, C1, C, D11, D12, D21]


# ---------- create auxiliary symbolic parameters 

# set numerical values of auxiliary parameters
# trailing "_nv" stands for "numerical value"
A_nv = sp.Matrix(np.array([[ 2.34697054e-01,  1.78386174e-02, -7.90637351e-01,
         8.84072076e-01,  9.53277591e-01],
       [ 1.55400436e-01, -1.51988178e+00, -1.02461727e+00,
         3.56127859e+00,  2.85020935e+00],
       [-4.59402708e-02, -8.98331232e-01, -5.77924215e+00,
         6.16280267e+00, -2.49261888e-01],
       [-3.10590709e-01,  2.70257159e+00,  3.77395273e+00,
        -1.81219988e+01, -1.04403202e+01],
       [-2.15918109e-01,  1.60799366e+00,  1.91847749e+00,
        -8.60673691e+00, -4.01719824e+01]]))
B_nv = sp.Matrix(np.array([[-10.08443846, -14.58558632],
       [-24.52667322,  -4.05193075],
       [-10.20558741, -23.43645559],
       [ 30.70743812,   2.43167146],
       [ 36.22243033, -30.75466281]]))
B1_nv = sp.Matrix(np.array([[-10.08443846, -14.58558632],
       [-24.52667322,  -4.05193075],
       [-10.20558741, -23.43645559],
       [ 30.70743812,   2.43167146],
       [ 36.22243033, -30.75466281]]))
C1_nv = sp.Matrix(np.array([[0.5, 0. , 0. , 0. , 0. ],
       [0. , 0.5, 0. , 0. , 0. ],
       [0. , 0. , 0.5, 0. , 0. ],
       [0. , 0. , 0. , 0.5, 0. ],
       [0. , 0. , 0. , 0. , 0.5],
       [0. , 0. , 0. , 0. , 0. ],
       [0. , 0. , 0. , 0. , 0. ]]))
C_nv = sp.Matrix(np.array([[ 0.02046242, -0.00967306, -0.0165063 ,  0.00960877, -0.00205671],
       [ 0.00998188,  0.02628029, -0.01231878, -0.07019525, -0.01318405],
       [ 0.01602015,  0.00330847, -0.00014708, -0.00181017, -0.00103942]]))
D11_nv = sp.Matrix(np.array([[0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]]))
D12_nv = sp.Matrix(np.array([[0.        , 0.        ],
       [0.        , 0.        ],
       [0.        , 0.        ],
       [0.        , 0.        ],
       [0.        , 0.        ],
       [7.07106781, 0.        ],
       [0.        , 7.07106781]]))
D21_nv = sp.Matrix(np.array([[0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]]))


# ---------- create symbolic parameter functions
# parameter values can be constant/fixed values OR set in relation to other parameters (for example: a = 2*b)  


# list of symbolic parameter functions
# tailing "_sf" stands for "symbolic parameter function"
pp_sf = [A_nv, B_nv, B1_nv, C1_nv, C_nv, D11_nv, D12_nv, D21_nv]


#  ---------- list for substitution
# -- entries are tuples like: (independent symbolic parameter, numerical value)
pp_subs_list = []


# OPTONAL: Dictionary which defines how certain variables shall be written
# in the table - key: Symbolic Variable, Value: LaTeX Representation/Code
# useful for example for complex variables: {Z: r"\underline{Z}"}
latex_names = {}


# ---------- Define LaTeX table

# Define table header 
# DON'T CHANGE FOLLOWING ENTRIES: "Symbol", "Value"
tabular_header = ["Symbol", "Value"]

# Define column text alignments
col_alignment = ["center", "left"]


# Define Entries of all columns before the Symbol-Column
# --- Entries need to be latex code
col_1 = [] 

# contains all lists of the columns before the "Symbol" Column
# --- Empty list, if there are no columns before the "Symbol" Column
start_columns_list = []


# Define Entries of the columns after the Value-Column
# --- Entries need to be latex code
col_4 = []

# contains all lists of columns after the FIX ENTRIES
# --- Empty list, if there are no columns after the "Value" column
end_columns_list = []