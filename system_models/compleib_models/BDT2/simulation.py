# This file was autogenerated from the template: simulation.py.template (2022-10-10 15:53:37).

import numpy as np
import system_model
from scipy.integrate import solve_ivp, odeint

from ackrep_core import ResultContainer
from ackrep_core.system_model_management import save_plot_in_dir
import matplotlib.pyplot as plt
import os
from ipydex import Container

# link to documentation with examples: https://ackrep-doc.readthedocs.io/en/latest/devdoc/contributing_data.html


def simulate():
    """
    simulate the system model with scipy.integrate.solve_ivp

    :return: result of solve_ivp, might contains input function
    """

    model = system_model.Model()

    rhs_xx_pp_symb = model.get_rhs_symbolic()
    rhs = model.get_rhs_func()

    # initial state values
    xx0 = np.ones(model.sys_dim)

    t_end = 10
    tt = np.linspace(0, t_end, 1000)

    simulation_data = solve_ivp(rhs, (0, t_end), xx0, t_eval=tt)

    # using odeint for models with large state vectors
    # res = odeint(rhs, y0=xx0, t=tt, tfirst=True)
    # simulation_data = Container()
    # simulation_data.y = res.transpose()
    # simulation_data.t = tt

    # postprocessing: calc output
    ny = 4
    C = model.get_parameter_value("C")
    D21 = model.get_parameter_value("D21")
    output = np.zeros((ny, len(tt)))
    for i in range(len(tt)):
        output[:,i] = np.matmul(C, simulation_data.y[:,i]) # + np.matmul(D21, w)
    simulation_data.output = output

    save_plot(simulation_data)

    return simulation_data


def save_plot(simulation_data):
    """
    plot your data and save the plot
    access to data via: simulation_data.t   array of time values
                        simulation_data.y   array of data components
                        simulation_data.uu  array of input values

    :param simulation_data: simulation_data of system_model
    :return: None
    """

    for i in range(simulation_data.output.shape[0]):
        plt.plot(simulation_data.t, simulation_data.output[i], label=f"$y_{i}$")

    plt.legend()
    plt.tight_layout()

    save_plot_in_dir()


def evaluate_simulation(simulation_data):
    """
    assert that the simulation results are as expected

    :param simulation_data: simulation_data of system_model
    :return:
    """
    expected_final_state = np.array([2.41388735e-01, 3.41651256e-01, 4.68051809e-01, 6.23879027e-01,
       8.16121395e-01, 1.04588584e+00, 1.31830195e+00, 1.62856401e+00,
       1.97281001e+00, 2.33425068e+00, 2.69294817e+00, 3.01789037e+00,
       3.27716945e+00, 3.43911797e+00, 3.48260634e+00, 3.40078936e+00,
       3.20422100e+00, 2.91747570e+00, 2.57321962e+00, 2.20487239e+00,
       1.84098216e+00, 2.05726485e+00, 2.25340898e+00, 2.41265403e+00,
       2.51891411e+00, 2.55977312e+00, 2.52918989e+00, 2.42897912e+00,
       2.26849411e+00, 2.06261500e+00, 1.82877239e+00, 1.58397601e+00,
       1.34260993e+00, 1.11530799e+00, 9.08808188e-01, 7.26460312e-01,
       5.69032478e-01, 4.35548003e-01, 3.24000855e-01, 2.31893793e-01,
       1.56595024e-01, 4.00000000e+01, 2.49931000e-30, 6.22035284e-31,
       1.51158790e-31, 3.58440886e-32, 8.28885886e-33, 1.86799637e-33,
       4.09972335e-34, 8.75596218e-35, 1.81834380e-35, 3.66858945e-36,
       7.18414456e-37, 1.36419495e-37, 2.50924585e-38, 4.46559059e-39,
       7.67973189e-40, 1.27456220e-40, 2.03839269e-41, 3.13639616e-42,
       4.63475051e-43, 6.56495405e-44, 8.89432914e-45, 1.14982205e-45,
       1.41454995e-46, 1.65105443e-47, 1.82207506e-48, 1.89374762e-49,
       1.84523277e-50, 1.67665119e-51, 1.41176892e-52, 1.09328653e-53,
       7.71524735e-55, 4.90479034e-56, 2.76798119e-57, 1.36001636e-58,
       5.66409080e-60, 1.92263091e-61, 4.99631175e-63, 8.85638741e-65,
       8.05478995e-67, 1.00000000e+00])

    rc = ResultContainer(score=1.0)
    simulated_final_state = simulation_data.y[:, -1]
    rc.final_state_errors = [
        simulated_final_state[i] - expected_final_state[i] for i in np.arange(0, len(simulated_final_state))
    ]
    rc.success = np.allclose(expected_final_state, simulated_final_state, rtol=0, atol=1e-2)

    return rc