# This file was autogenerated from the template: parameters.py.template (2022-10-10 15:54:05).

import sys
import os
import numpy as np
import sympy as sp

import tabulate as tab


#link to documentation with examples: https://ackrep-doc.readthedocs.io/en/latest/devdoc/contributing_data.html


# set model name
model_name = '2D heat flow example, HF2D_JetControlExamples thermal properties of copper, sd=0.3825'


# ---------- create symbolic parameters
A = sp.MatrixSymbol('A', 5, 5)
B = sp.MatrixSymbol('B', 5, 2)
B1 = sp.MatrixSymbol('B1', 5, 5)
C1 = sp.MatrixSymbol('C1', 7, 5)
C = sp.MatrixSymbol('C', 3, 5)
D11 = sp.MatrixSymbol('D11', 7, 5)
D12 = sp.MatrixSymbol('D12', 7, 2)
D21 = sp.MatrixSymbol('D21', 3, 5)

pp_symb = [A, B, B1, C1, C, D11, D12, D21]


# ---------- create auxiliary symbolic parameters 

# set numerical values of auxiliary parameters
# trailing "_nv" stands for "numerical value"
A_nv = sp.Matrix(np.array([[ 1.06359662e-01,  8.96767843e-02,  1.80487458e-01,
         1.29343435e+00,  5.88872604e-01],
       [ 5.46154351e-02, -9.83184654e-01, -1.12293507e+00,
         9.37730460e-02, -3.20274780e+00],
       [ 8.60234885e-02, -9.50018964e-01, -2.27556911e+00,
         1.43177483e-02, -4.97920707e+00],
       [ 1.74626443e-01,  3.88594911e-01,  2.41978445e-01,
        -1.11895994e+01,  8.22111019e-01],
       [-4.87461611e-02, -2.11276326e+00, -4.59825355e+00,
         7.97497704e-01, -2.37459482e+01]]))
B_nv = sp.Matrix(np.array([[ -4.07667753, -27.76055497],
       [ 18.72922538,  21.87764601],
       [ 11.46271839,  35.15733948],
       [-22.81633601,  95.09552967],
       [ 26.71150861,  53.79678616]]))
B1_nv = sp.Matrix(np.array([[ -4.07667753, -27.76055497],
       [ 18.72922538,  21.87764601],
       [ 11.46271839,  35.15733948],
       [-22.81633601,  95.09552967],
       [ 26.71150861,  53.79678616]]))
C1_nv = sp.Matrix(np.array([[0.5, 0. , 0. , 0. , 0. ],
       [0. , 0.5, 0. , 0. , 0. ],
       [0. , 0. , 0.5, 0. , 0. ],
       [0. , 0. , 0. , 0.5, 0. ],
       [0. , 0. , 0. , 0. , 0.5],
       [0. , 0. , 0. , 0. , 0. ],
       [0. , 0. , 0. , 0. , 0. ]]))
C_nv = sp.Matrix(np.array([[ 0.02651348,  0.02022715,  0.00752744,  0.01401639,  0.00199983],
       [ 0.00930792, -0.03057187, -0.00845952,  0.03785305, -0.05994474],
       [ 0.01212424, -0.00360994, -0.00313539, -0.03451334, -0.02449221]]))
D11_nv = sp.Matrix(np.array([[0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]]))
D12_nv = sp.Matrix(np.array([[0.        , 0.        ],
       [0.        , 0.        ],
       [0.        , 0.        ],
       [0.        , 0.        ],
       [0.        , 0.        ],
       [7.07106781, 0.        ],
       [0.        , 7.07106781]]))
D21_nv = sp.Matrix(np.array([[0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]]))


# ---------- create symbolic parameter functions
# parameter values can be constant/fixed values OR set in relation to other parameters (for example: a = 2*b)  


# list of symbolic parameter functions
# tailing "_sf" stands for "symbolic parameter function"
pp_sf = [A_nv, B_nv, B1_nv, C1_nv, C_nv, D11_nv, D12_nv, D21_nv]


#  ---------- list for substitution
# -- entries are tuples like: (independent symbolic parameter, numerical value)
pp_subs_list = []


# OPTONAL: Dictionary which defines how certain variables shall be written
# in the table - key: Symbolic Variable, Value: LaTeX Representation/Code
# useful for example for complex variables: {Z: r"\underline{Z}"}
latex_names = {}


# ---------- Define LaTeX table

# Define table header 
# DON'T CHANGE FOLLOWING ENTRIES: "Symbol", "Value"
tabular_header = ["Symbol", "Value"]

# Define column text alignments
col_alignment = ["center", "left"]


# Define Entries of all columns before the Symbol-Column
# --- Entries need to be latex code
col_1 = [] 

# contains all lists of the columns before the "Symbol" Column
# --- Empty list, if there are no columns before the "Symbol" Column
start_columns_list = []


# Define Entries of the columns after the Value-Column
# --- Entries need to be latex code
col_4 = []

# contains all lists of columns after the FIX ENTRIES
# --- Empty list, if there are no columns after the "Value" column
end_columns_list = []