# This file was autogenerated from the template: parameters.py.template (2022-10-10 15:53:28).

import sys
import os
import numpy as np
import sympy as sp

import tabulate as tab


#link to documentation with examples: https://ackrep-doc.readthedocs.io/en/latest/devdoc/contributing_data.html


# set model name
model_name = 'Chemical reactor model by'


# ---------- create symbolic parameters
A = sp.MatrixSymbol('A', 8, 8)
B = sp.MatrixSymbol('B', 8, 1)
B1 = sp.MatrixSymbol('B1', 8, 1)
C1 = sp.MatrixSymbol('C1', 1, 8)
C = sp.MatrixSymbol('C', 1, 8)
D11 = sp.MatrixSymbol('D11', 1, 1)
D12 = sp.MatrixSymbol('D12', 1, 1)
D21 = sp.MatrixSymbol('D21', 1, 1)

pp_symb = [A, B, B1, C1, C, D11, D12, D21]


# ---------- create auxiliary symbolic parameters 

# set numerical values of auxiliary parameters
# trailing "_nv" stands for "numerical value"
A_nv = sp.Matrix(np.array([[ 0.5623  , -0.01642 ,  0.01287 , -0.0161  ,  0.02094 , -0.02988 ,
         0.0183  ,  0.008743],
       [ 0.102   ,  0.6114  , -0.02468 ,  0.02468 , -0.03005 ,  0.04195 ,
        -0.02559 ,  0.03889 ],
       [ 0.1361  ,  0.2523  ,  0.641   , -0.03404 ,  0.03292 , -0.04296 ,
         0.02588 ,  0.08467 ],
       [ 0.09951 ,  0.2859  ,  0.3476  ,  0.6457  , -0.03249 ,  0.03316 ,
        -0.01913 ,  0.1103  ],
       [-0.04794 ,  0.08708 ,  0.3297  ,  0.3102  ,  0.6201  , -0.03015 ,
         0.01547 ,  0.08457 ],
       [-0.1373  , -0.1224  ,  0.1705  ,  0.3106  ,  0.191   ,  0.5815  ,
        -0.01274 ,  0.05394 ],
       [-0.1497  , -0.1692  ,  0.1165  ,  0.2962  ,  0.1979  ,  0.07631 ,
         0.5242  ,  0.04702 ],
       [ 0.      ,  0.      ,  0.      ,  0.      ,  0.      ,  0.      ,
         0.      ,  0.6065  ]]))
B_nv = sp.Matrix(np.array([[-0.1774 ],
       [-0.2156 ],
       [-0.2194 ],
       [-0.09543],
       [ 0.0579 ],
       [ 0.09303],
       [ 0.08962],
       [ 0.     ]]))
B1_nv = sp.Matrix(np.array([[-0.1774 ],
       [-0.2156 ],
       [-0.2194 ],
       [-0.09543],
       [ 0.0579 ],
       [ 0.09303],
       [ 0.08962],
       [ 0.     ]]))
C1_nv = sp.Matrix(np.array([[-4.650e-02, -1.135e-01, -1.909e-01, -2.619e-01, -2.634e-01,
        -1.422e-01, -2.000e-04,  1.856e-01]]))
C_nv = sp.Matrix(np.array([[-0.0049,  0.0049, -0.006 ,  0.01  ,  0.0263,  0.3416,  0.6759,
         0.    ]]))
D11_nv = sp.Matrix(np.array([0.]))
D12_nv = sp.Matrix(np.array([0.1001]))
D21_nv = sp.Matrix(np.array([1.]))


# ---------- create symbolic parameter functions
# parameter values can be constant/fixed values OR set in relation to other parameters (for example: a = 2*b)  


# list of symbolic parameter functions
# tailing "_sf" stands for "symbolic parameter function"
pp_sf = [A_nv, B_nv, B1_nv, C1_nv, C_nv, D11_nv, D12_nv, D21_nv]


#  ---------- list for substitution
# -- entries are tuples like: (independent symbolic parameter, numerical value)
pp_subs_list = []


# OPTONAL: Dictionary which defines how certain variables shall be written
# in the table - key: Symbolic Variable, Value: LaTeX Representation/Code
# useful for example for complex variables: {Z: r"\underline{Z}"}
latex_names = {}


# ---------- Define LaTeX table

# Define table header 
# DON'T CHANGE FOLLOWING ENTRIES: "Symbol", "Value"
tabular_header = ["Symbol", "Value"]

# Define column text alignments
col_alignment = ["center", "left"]


# Define Entries of all columns before the Symbol-Column
# --- Entries need to be latex code
col_1 = [] 

# contains all lists of the columns before the "Symbol" Column
# --- Empty list, if there are no columns before the "Symbol" Column
start_columns_list = []


# Define Entries of the columns after the Value-Column
# --- Entries need to be latex code
col_4 = []

# contains all lists of columns after the FIX ENTRIES
# --- Empty list, if there are no columns after the "Value" column
end_columns_list = []