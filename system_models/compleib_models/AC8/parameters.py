# This file was autogenerated from the template: parameters.py.template (2022-10-10 15:53:16).

import sys
import os
import numpy as np
import sympy as sp

import tabulate as tab


#link to documentation with examples: https://ackrep-doc.readthedocs.io/en/latest/devdoc/contributing_data.html


# set model name
model_name = 'Transport Aircraft model Boing flight condition VMIN'


# ---------- create symbolic parameters
A = sp.MatrixSymbol('A', 9, 9)
B = sp.MatrixSymbol('B', 9, 1)
B1 = sp.MatrixSymbol('B1', 9, 10)
C1 = sp.MatrixSymbol('C1', 2, 9)
C = sp.MatrixSymbol('C', 5, 9)
D11 = sp.MatrixSymbol('D11', 2, 10)
D12 = sp.MatrixSymbol('D12', 2, 1)
D21 = sp.MatrixSymbol('D21', 5, 10)

pp_symb = [A, B, B1, C1, C, D11, D12, D21]


# ---------- create auxiliary symbolic parameters 

# set numerical values of auxiliary parameters
# trailing "_nv" stands for "numerical value"
A_nv = sp.Matrix(np.array([[-1.365e-02,  1.780e-01,  1.700e-04, -5.610e-01, -3.726e-02,
         0.000e+00,  1.365e-02, -1.311e-02,  0.000e+00],
       [-1.516e-02, -7.520e-01,  1.001e+00,  1.270e-03, -6.311e-02,
         0.000e+00,  1.516e-02,  5.536e-02,  0.000e+00],
       [ 1.070e-03,  7.896e-02, -8.725e-01,  0.000e+00, -3.399e+00,
         0.000e+00, -1.070e-03, -5.810e-03,  0.000e+00],
       [ 0.000e+00,  0.000e+00,  1.000e+00,  0.000e+00,  0.000e+00,
         0.000e+00,  0.000e+00,  0.000e+00,  0.000e+00],
       [ 0.000e+00,  0.000e+00,  0.000e+00,  0.000e+00, -2.000e+01,
         1.072e+01,  0.000e+00,  0.000e+00,  0.000e+00],
       [ 0.000e+00,  0.000e+00,  0.000e+00,  0.000e+00,  0.000e+00,
        -5.000e+01,  0.000e+00,  0.000e+00,  0.000e+00],
       [ 0.000e+00,  0.000e+00,  0.000e+00,  0.000e+00,  0.000e+00,
         0.000e+00, -4.447e-01,  0.000e+00,  0.000e+00],
       [ 0.000e+00,  0.000e+00,  0.000e+00,  0.000e+00,  0.000e+00,
         0.000e+00,  0.000e+00, -4.447e-01,  4.400e-03],
       [ 0.000e+00,  0.000e+00,  0.000e+00,  0.000e+00,  0.000e+00,
         0.000e+00,  0.000e+00, -4.400e-03, -4.447e-01]]))
B_nv = sp.Matrix(np.array([[ 0.],
       [ 0.],
       [ 0.],
       [ 0.],
       [ 0.],
       [50.],
       [ 0.],
       [ 0.],
       [ 0.]]))
B1_nv = sp.Matrix(np.array([[ 0.],
       [ 0.],
       [ 0.],
       [ 0.],
       [ 0.],
       [50.],
       [ 0.],
       [ 0.],
       [ 0.]]))
C1_nv = sp.Matrix(np.array([[ 0.00323,  0.16015, -0.01679,  0.     , -0.0516 ,  0.     ,
        -0.00323, -0.01179,  0.     ],
       [ 0.5    ,  0.     ,  0.     ,  0.     ,  0.     ,  0.     ,
        -0.5    ,  0.     ,  0.     ]]))
C_nv = sp.Matrix(np.array([[ 6.460e-03,  3.203e-01, -3.358e-02,  0.000e+00, -1.032e-01,
         0.000e+00, -6.460e-03, -2.358e-02,  0.000e+00],
       [ 1.000e+00,  0.000e+00,  0.000e+00,  0.000e+00,  0.000e+00,
         0.000e+00, -1.000e+00,  0.000e+00,  0.000e+00],
       [-1.365e-02,  1.780e-01,  1.700e-04, -5.610e-01, -3.726e-02,
         0.000e+00,  1.365e-02, -1.311e-02,  0.000e+00],
       [ 0.000e+00, -1.358e+01,  0.000e+00,  1.358e+01,  0.000e+00,
         0.000e+00,  0.000e+00,  0.000e+00,  0.000e+00],
       [ 0.000e+00,  0.000e+00,  1.000e+00,  0.000e+00,  0.000e+00,
         0.000e+00,  0.000e+00,  0.000e+00,  0.000e+00]]))
D11_nv = sp.Matrix(np.array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]))
D12_nv = sp.Matrix(np.array([[0.5],
       [0.5]]))
D21_nv = sp.Matrix(np.array([[0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
       [0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 0., 0., 0., 0., 1., 0.]]))


# ---------- create symbolic parameter functions
# parameter values can be constant/fixed values OR set in relation to other parameters (for example: a = 2*b)  


# list of symbolic parameter functions
# tailing "_sf" stands for "symbolic parameter function"
pp_sf = [A_nv, B_nv, B1_nv, C1_nv, C_nv, D11_nv, D12_nv, D21_nv]


#  ---------- list for substitution
# -- entries are tuples like: (independent symbolic parameter, numerical value)
pp_subs_list = []


# OPTONAL: Dictionary which defines how certain variables shall be written
# in the table - key: Symbolic Variable, Value: LaTeX Representation/Code
# useful for example for complex variables: {Z: r"\underline{Z}"}
latex_names = {}


# ---------- Define LaTeX table

# Define table header 
# DON'T CHANGE FOLLOWING ENTRIES: "Symbol", "Value"
tabular_header = ["Symbol", "Value"]

# Define column text alignments
col_alignment = ["center", "left"]


# Define Entries of all columns before the Symbol-Column
# --- Entries need to be latex code
col_1 = [] 

# contains all lists of the columns before the "Symbol" Column
# --- Empty list, if there are no columns before the "Symbol" Column
start_columns_list = []


# Define Entries of the columns after the Value-Column
# --- Entries need to be latex code
col_4 = []

# contains all lists of columns after the FIX ENTRIES
# --- Empty list, if there are no columns after the "Value" column
end_columns_list = []