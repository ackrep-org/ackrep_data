# This file was autogenerated from the template: parameters.py.template (2022-10-10 15:54:05).

import sys
import os
import numpy as np
import sympy as sp

import tabulate as tab


#link to documentation with examples: https://ackrep-doc.readthedocs.io/en/latest/devdoc/contributing_data.html


# set model name
model_name = '2D heat flow example, rectangular domain thermal properties of copper'


# ---------- create symbolic parameters
A = sp.MatrixSymbol('A', 5, 5)
B = sp.MatrixSymbol('B', 5, 2)
B1 = sp.MatrixSymbol('B1', 5, 5)
C1 = sp.MatrixSymbol('C1', 7, 5)
C = sp.MatrixSymbol('C', 4, 5)
D11 = sp.MatrixSymbol('D11', 7, 5)
D12 = sp.MatrixSymbol('D12', 7, 2)
D21 = sp.MatrixSymbol('D21', 4, 5)

pp_symb = [A, B, B1, C1, C, D11, D12, D21]


# ---------- create auxiliary symbolic parameters 

# set numerical values of auxiliary parameters
# trailing "_nv" stands for "numerical value"
A_nv = sp.Matrix(np.array([[ -0.41648767,   0.44813322,   1.07258052,   1.28556148,
          1.77812468],
       [  0.32738805,  -2.7984068 ,  -2.45535937,  -3.72213559,
         -3.39159861],
       [  0.7209806 ,  -1.9433016 ,  -4.15205038,  -5.67152883,
         -6.01566198],
       [  0.4424953 ,  -2.35949986,  -5.11447588, -13.12562568,
        -13.40116898],
       [  0.79170055,  -1.68984082,  -5.13612335, -13.05477742,
        -18.58834045]]))
B_nv = sp.Matrix(np.array([[-10.31385656, -17.97979209],
       [  2.58614815,  25.22812269],
       [ 16.57865227,  32.71165242],
       [  5.26405603,  29.26547936],
       [ 10.13945551,  50.06281139]]))
B1_nv = sp.Matrix(np.array([[-10.31385656, -17.97979209],
       [  2.58614815,  25.22812269],
       [ 16.57865227,  32.71165242],
       [  5.26405603,  29.26547936],
       [ 10.13945551,  50.06281139]]))
C1_nv = sp.Matrix(np.array([[7.07106781, 0.        , 0.        , 0.        , 0.        ],
       [0.        , 7.07106781, 0.        , 0.        , 0.        ],
       [0.        , 0.        , 7.07106781, 0.        , 0.        ],
       [0.        , 0.        , 0.        , 7.07106781, 0.        ],
       [0.        , 0.        , 0.        , 0.        , 7.07106781],
       [0.        , 0.        , 0.        , 0.        , 0.        ],
       [0.        , 0.        , 0.        , 0.        , 0.        ]]))
C_nv = sp.Matrix(np.array([[ 0.01388737, -0.00988435,  0.0184442 , -0.00794794, -0.01437748],
       [ 0.01771265,  0.01604814, -0.01975118, -0.00174514,  0.01331995],
       [ 0.01479403, -0.03199904, -0.0462075 , -0.03547654, -0.02975635],
       [ 0.01246835, -0.03567248, -0.0268094 , -0.03627221, -0.01999821]]))
D11_nv = sp.Matrix(np.array([[0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]]))
D12_nv = sp.Matrix(np.array([[0.        , 0.        ],
       [0.        , 0.        ],
       [0.        , 0.        ],
       [0.        , 0.        ],
       [0.        , 0.        ],
       [2.23606798, 0.        ],
       [0.        , 2.23606798]]))
D21_nv = sp.Matrix(np.array([[0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]]))


# ---------- create symbolic parameter functions
# parameter values can be constant/fixed values OR set in relation to other parameters (for example: a = 2*b)  


# list of symbolic parameter functions
# tailing "_sf" stands for "symbolic parameter function"
pp_sf = [A_nv, B_nv, B1_nv, C1_nv, C_nv, D11_nv, D12_nv, D21_nv]


#  ---------- list for substitution
# -- entries are tuples like: (independent symbolic parameter, numerical value)
pp_subs_list = []


# OPTONAL: Dictionary which defines how certain variables shall be written
# in the table - key: Symbolic Variable, Value: LaTeX Representation/Code
# useful for example for complex variables: {Z: r"\underline{Z}"}
latex_names = {}


# ---------- Define LaTeX table

# Define table header 
# DON'T CHANGE FOLLOWING ENTRIES: "Symbol", "Value"
tabular_header = ["Symbol", "Value"]

# Define column text alignments
col_alignment = ["center", "left"]


# Define Entries of all columns before the Symbol-Column
# --- Entries need to be latex code
col_1 = [] 

# contains all lists of the columns before the "Symbol" Column
# --- Empty list, if there are no columns before the "Symbol" Column
start_columns_list = []


# Define Entries of the columns after the Value-Column
# --- Entries need to be latex code
col_4 = []

# contains all lists of columns after the FIX ENTRIES
# --- Empty list, if there are no columns after the "Value" column
end_columns_list = []