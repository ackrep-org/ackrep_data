# This file was autogenerated from the template: parameters.py.template (2022-10-10 15:54:06).

import sys
import os
import numpy as np
import sympy as sp

import tabulate as tab


#link to documentation with examples: https://ackrep-doc.readthedocs.io/en/latest/devdoc/contributing_data.html


# set model name
model_name = '2D heat flow example, rectangular domain with perturbation operator added and extended to a nonlinear model thermal properties of copper'


# ---------- create symbolic parameters
A = sp.MatrixSymbol('A', 5, 5)
B = sp.MatrixSymbol('B', 5, 2)
B1 = sp.MatrixSymbol('B1', 5, 5)
C1 = sp.MatrixSymbol('C1', 7, 5)
C = sp.MatrixSymbol('C', 4, 5)
D11 = sp.MatrixSymbol('D11', 7, 5)
D12 = sp.MatrixSymbol('D12', 7, 2)
D21 = sp.MatrixSymbol('D21', 4, 5)

pp_symb = [A, B, B1, C1, C, D11, D12, D21]


# ---------- create auxiliary symbolic parameters 

# set numerical values of auxiliary parameters
# trailing "_nv" stands for "numerical value"
A_nv = sp.Matrix(np.array([[ 0.10753901, -0.11051567, -0.23876731, -0.02099416,  0.06558811],
       [-0.05977513, -1.52611185, -2.06239634, -0.05735135,  1.26021273],
       [-0.08702678, -1.8680411 , -5.46127457, -0.2927841 ,  2.83982462],
       [ 0.01810353, -0.04863129, -0.36394607, -2.39806779,  1.18725638],
       [-0.07336812,  1.03387752,  2.89701623,  1.10551332, -7.03451627]]))
B_nv = sp.Matrix(np.array([[ -5.54503465,  -8.26067671],
       [-17.28217577, -22.57727714],
       [-17.11786161, -30.92592896],
       [-13.53658504,  25.06516975],
       [ 21.09196314, -16.86752328]]))
B1_nv = sp.Matrix(np.array([[ -5.54503465,  -8.26067671],
       [-17.28217577, -22.57727714],
       [-17.11786161, -30.92592896],
       [-13.53658504,  25.06516975],
       [ 21.09196314, -16.86752328]]))
C1_nv = sp.Matrix(np.array([[2.23606798, 0.        , 0.        , 0.        , 0.        ],
       [0.        , 2.23606798, 0.        , 0.        , 0.        ],
       [0.        , 0.        , 2.23606798, 0.        , 0.        ],
       [0.        , 0.        , 0.        , 2.23606798, 0.        ],
       [0.        , 0.        , 0.        , 0.        , 2.23606798],
       [0.        , 0.        , 0.        , 0.        , 0.        ],
       [0.        , 0.        , 0.        , 0.        , 0.        ]]))
C_nv = sp.Matrix(np.array([[ 0.89785355, -0.55735338,  0.52036099, -0.02976505, -0.25889531],
       [ 0.52106208,  1.18112835,  0.18140605,  0.9945666 , -1.87376278],
       [ 0.35497204,  1.26030102,  1.97660807,  0.78637407,  0.96649274],
       [ 0.43159682,  0.70043752,  0.92338838, -1.64046978, -0.89209559]]))
D11_nv = sp.Matrix(np.array([[0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]]))
D12_nv = sp.Matrix(np.array([[0.        , 0.        ],
       [0.        , 0.        ],
       [0.        , 0.        ],
       [0.        , 0.        ],
       [0.        , 0.        ],
       [7.07106781, 0.        ],
       [0.        , 7.07106781]]))
D21_nv = sp.Matrix(np.array([[0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]]))


# ---------- create symbolic parameter functions
# parameter values can be constant/fixed values OR set in relation to other parameters (for example: a = 2*b)  


# list of symbolic parameter functions
# tailing "_sf" stands for "symbolic parameter function"
pp_sf = [A_nv, B_nv, B1_nv, C1_nv, C_nv, D11_nv, D12_nv, D21_nv]


#  ---------- list for substitution
# -- entries are tuples like: (independent symbolic parameter, numerical value)
pp_subs_list = []


# OPTONAL: Dictionary which defines how certain variables shall be written
# in the table - key: Symbolic Variable, Value: LaTeX Representation/Code
# useful for example for complex variables: {Z: r"\underline{Z}"}
latex_names = {}


# ---------- Define LaTeX table

# Define table header 
# DON'T CHANGE FOLLOWING ENTRIES: "Symbol", "Value"
tabular_header = ["Symbol", "Value"]

# Define column text alignments
col_alignment = ["center", "left"]


# Define Entries of all columns before the Symbol-Column
# --- Entries need to be latex code
col_1 = [] 

# contains all lists of the columns before the "Symbol" Column
# --- Empty list, if there are no columns before the "Symbol" Column
start_columns_list = []


# Define Entries of the columns after the Value-Column
# --- Entries need to be latex code
col_4 = []

# contains all lists of columns after the FIX ENTRIES
# --- Empty list, if there are no columns after the "Value" column
end_columns_list = []