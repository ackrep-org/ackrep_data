# This file was autogenerated from the template: simulation.py.template (2022-10-10 15:54:07).

import numpy as np
import system_model
from scipy.integrate import solve_ivp, odeint

from ackrep_core import ResultContainer
from ackrep_core.system_model_management import save_plot_in_dir
import matplotlib.pyplot as plt
import os
from ipydex import Container

# link to documentation with examples: https://ackrep-doc.readthedocs.io/en/latest/devdoc/contributing_data.html


def simulate():
    """
    simulate the system model with scipy.integrate.solve_ivp

    :return: result of solve_ivp, might contains input function
    """

    model = system_model.Model()

    rhs_xx_pp_symb = model.get_rhs_symbolic()
    rhs = model.get_rhs_func()

    # initial state values
    xx0 = np.ones(model.sys_dim)

    t_end = 10
    tt = np.linspace(0, t_end, 1000)

    simulation_data = solve_ivp(rhs, (0, t_end), xx0, t_eval=tt)

    # using odeint for models with large state vectors
    # res = odeint(rhs, y0=xx0, t=tt, tfirst=True)
    # simulation_data = Container()
    # simulation_data.y = res.transpose()
    # simulation_data.t = tt

    # postprocessing: calc output
    ny = 2
    C = model.get_parameter_value("C")
    D21 = model.get_parameter_value("D21")
    output = np.zeros((ny, len(tt)))
    for i in range(len(tt)):
        output[:,i] = np.matmul(C, simulation_data.y[:,i]) # + np.matmul(D21, w)
    simulation_data.output = output

    save_plot(simulation_data)

    return simulation_data


def save_plot(simulation_data):
    """
    plot your data and save the plot
    access to data via: simulation_data.t   array of time values
                        simulation_data.y   array of data components
                        simulation_data.uu  array of input values

    :param simulation_data: simulation_data of system_model
    :return: None
    """

    for i in range(simulation_data.output.shape[0]):
        plt.plot(simulation_data.t, simulation_data.output[i], label=f"$y_{i}$")

    plt.legend()
    plt.tight_layout()

    save_plot_in_dir()


def evaluate_simulation(simulation_data):
    """
    assert that the simulation results are as expected

    :param simulation_data: simulation_data of system_model
    :return:
    """
    expected_final_state = np.array([ 0.01100786, -0.12964382, -0.31556083, -0.44642833, -0.40678202,
       -0.37532819, -0.54550377, -0.77620929, -0.93309014, -0.86348783,
       -0.82087743, -0.956428  , -1.15341157, -1.32248248, -1.42623469,
       -1.52451183, -1.56867496, -1.49312415, -1.54880038, -1.76740712,
       -2.03005057, -2.226443  , -2.36762952, -2.53819304, -2.53543171,
       -2.37678391, -2.36192787, -2.34324459, -2.11801071, -2.14028672,
       -1.94629266, -1.21920617,  1.50880571,  1.9458024 ,  0.60018105,
       -0.93127658, -0.03744544,  0.45778768,  0.88251807,  1.10359248,
        2.11812257,  2.03637792, -1.37090159, -1.08084519,  0.4894126 ,
        4.12850887,  3.22532277,  0.76641761,  2.13546679,  0.44447219,
       -1.11485035, -0.63935535,  1.74133741,  3.25129044,  2.93590183,
        3.72554468,  4.3889719 ,  2.62030087,  0.85789992, -0.12649578])

    rc = ResultContainer(score=1.0)
    simulated_final_state = simulation_data.y[:, -1]
    rc.final_state_errors = [
        simulated_final_state[i] - expected_final_state[i] for i in np.arange(0, len(simulated_final_state))
    ]
    rc.success = np.allclose(expected_final_state, simulated_final_state, rtol=0, atol=1e-2)

    return rc