# This file was autogenerated from the template: parameters.py.template (2022-10-10 15:54:06).

import sys
import os
import numpy as np
import sympy as sp

import tabulate as tab


#link to documentation with examples: https://ackrep-doc.readthedocs.io/en/latest/devdoc/contributing_data.html


# set model name
model_name = '2D heat flow example, rectangular domain thermal properties of platinum'


# ---------- create symbolic parameters
A = sp.MatrixSymbol('A', 5, 5)
B = sp.MatrixSymbol('B', 5, 2)
B1 = sp.MatrixSymbol('B1', 5, 5)
C1 = sp.MatrixSymbol('C1', 7, 5)
C = sp.MatrixSymbol('C', 4, 5)
D11 = sp.MatrixSymbol('D11', 7, 5)
D12 = sp.MatrixSymbol('D12', 7, 2)
D21 = sp.MatrixSymbol('D21', 4, 5)

pp_symb = [A, B, B1, C1, C, D11, D12, D21]


# ---------- create auxiliary symbolic parameters 

# set numerical values of auxiliary parameters
# trailing "_nv" stands for "numerical value"
A_nv = sp.Matrix(np.array([[ -0.37772709,   1.36791281,  -2.87290612,   3.32321037,
          7.55690538],
       [  0.16680559,  -8.47040985,   7.94440351,  -9.88353118,
        -17.26830167],
       [ -0.6881459 ,   6.1112684 , -13.17531471,  11.52374267,
         22.4291518 ],
       [  0.08458209,  -6.42148117,  10.27843945, -19.09497138,
        -32.3377245 ],
       [  0.53354038,  -8.75641894,  18.24166763, -30.41964517,
        -77.12755156]]))
B_nv = sp.Matrix(np.array([[-10.18812488,  -6.67824043],
       [  0.39098466,  10.32501005],
       [-20.28873116,  -8.80554396],
       [  1.43281767,   3.19065572],
       [ 10.96217705,  15.00621302]]))
B1_nv = sp.Matrix(np.array([[-10.18812488,  -6.67824043],
       [  0.39098466,  10.32501005],
       [-20.28873116,  -8.80554396],
       [  1.43281767,   3.19065572],
       [ 10.96217705,  15.00621302]]))
C1_nv = sp.Matrix(np.array([[0.70710678, 0.        , 0.        , 0.        , 0.        ],
       [0.        , 0.70710678, 0.        , 0.        , 0.        ],
       [0.        , 0.        , 0.70710678, 0.        , 0.        ],
       [0.        , 0.        , 0.        , 0.70710678, 0.        ],
       [0.        , 0.        , 0.        , 0.        , 0.70710678],
       [0.        , 0.        , 0.        , 0.        , 0.        ],
       [0.        , 0.        , 0.        , 0.        , 0.        ]]))
C_nv = sp.Matrix(np.array([[ 0.54545081, -0.49130643, -0.48635888, -0.3216928 , -0.5149806 ],
       [ 0.58508721,  0.83053574,  0.8274487 , -0.29234346,  0.19977664],
       [ 0.55827828, -1.047228  ,  1.82165967, -0.24032092, -0.85288395],
       [ 0.52652973, -1.3760178 ,  0.47930376, -0.72656476, -1.26853689]]))
D11_nv = sp.Matrix(np.array([[0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]]))
D12_nv = sp.Matrix(np.array([[0.        , 0.        ],
       [0.        , 0.        ],
       [0.        , 0.        ],
       [0.        , 0.        ],
       [0.        , 0.        ],
       [7.07106781, 0.        ],
       [0.        , 7.07106781]]))
D21_nv = sp.Matrix(np.array([[0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]]))


# ---------- create symbolic parameter functions
# parameter values can be constant/fixed values OR set in relation to other parameters (for example: a = 2*b)  


# list of symbolic parameter functions
# tailing "_sf" stands for "symbolic parameter function"
pp_sf = [A_nv, B_nv, B1_nv, C1_nv, C_nv, D11_nv, D12_nv, D21_nv]


#  ---------- list for substitution
# -- entries are tuples like: (independent symbolic parameter, numerical value)
pp_subs_list = []


# OPTONAL: Dictionary which defines how certain variables shall be written
# in the table - key: Symbolic Variable, Value: LaTeX Representation/Code
# useful for example for complex variables: {Z: r"\underline{Z}"}
latex_names = {}


# ---------- Define LaTeX table

# Define table header 
# DON'T CHANGE FOLLOWING ENTRIES: "Symbol", "Value"
tabular_header = ["Symbol", "Value"]

# Define column text alignments
col_alignment = ["center", "left"]


# Define Entries of all columns before the Symbol-Column
# --- Entries need to be latex code
col_1 = [] 

# contains all lists of the columns before the "Symbol" Column
# --- Empty list, if there are no columns before the "Symbol" Column
start_columns_list = []


# Define Entries of the columns after the Value-Column
# --- Entries need to be latex code
col_4 = []

# contains all lists of columns after the FIX ENTRIES
# --- Empty list, if there are no columns after the "Value" column
end_columns_list = []