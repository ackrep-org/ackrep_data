jobs: # A basic unit of work in a run
  Validate_Data: 
    # directory where steps are run
    working_directory: ~/ackrep_data
    docker: # run the steps with Docker
      # CircleCI Python images available at: https://hub.docker.com/r/circleci/python/
      - image: cimg/python:3.8
        environment: # environment variables for primary container
          NO_IPS_EXCEPTHOOK: "True"
          CI: "True"

    steps: # steps that comprise the `build` job
      - checkout # check out source code to working directory
      # - run:
      #     name: Clone Core
      #     command: | 
      #       python -m venv venv
      #       . venv/bin/activate
      #       cd ../
      #       git clone https://github.com/ackrep-org/ackrep_core.git
      #       cd ackrep_core
      #       git checkout develop
      # - restore_cache:
      # # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
      #     key: deps1--{{ checksum "../ackrep_core/requirements.txt" }}
      # - run:
      #     name: Install Core Dependancies
      #     command: | 
      #       . venv/bin/activate
      #       cd ../ackrep_core
      #       pip install -r requirements.txt
      #       pip install -e .
      #       python manage.py makemigrations
      # - save_cache: # cache Python dependencies using checksum of requirements as the cache-key
      #     key: deps1--{{ checksum "../ackrep_core/requirements.txt" }}
      #     paths:
      #       - "venv"
      # - run:
      #     name: Change Permissions
      #     command: |
      #       cd ../
      #       sudo chown -R 3434:999 ackrep_data
      #       sudo chmod -R g+rw ackrep_data
      #       ls -n
      #       id
      # - setup_remote_docker:
      #     version: 20.10.14
      #     docker_layer_caching: true
      # - run: 
      #     name: Setup Images
      #     command: |
      #       echo old images:
      #       docker images
      #       echo pulling default image
      #       docker pull ghcr.io/ackrep-org/default_environment:latest
      #       docker image prune -f
      #       docker images
      #       echo 1
      #       docker create -v /code/ackrep_data --name dummy alpine:3.4 /bin/true
      #       echo 2
      #       docker cp /home/circleci/ackrep_data dummy:/code
      #       echo 3
      #       docker run --volumes-from dummy --entrypoint "/bin/ls" ghcr.io/ackrep-org/default_environment:latest -n ../
      # - run:
      #     name: Show Versions
      #     command: | 
      #       echo default env version:
      #       docker run --volumes-from dummy --entrypoint "tail" ghcr.io/ackrep-org/default_environment:latest -1 ../Dockerfile_default_environment
      #       printf "\ncore last commit\n:"
      #       cd ../ackrep_core
      #       git log -1
      # - run:
      #     name: Check all Solutions
      #     command: |
      #       . venv/bin/activate
      #       ackrep --bootstrap-db
      #       ackrep -l .
      #       ackrep --check-all-entities      
      - run:
          name: Create Test File
          command: |
            mkdir -p ../artifacts/ackrep_ci_results
            touch ../artifacts/ackrep_ci_results/test.txt
            echo "123" > ../artifacts/ackrep_ci_results/test.txt
      - store_artifacts:
          path: ../artifacts
      - add_ssh_keys:
          fingerprints:
            - 3c:8c:da:be:18:78:9a:cc:c7:d2:bc:73:94:98:04:0e
      - run:
          name: Push Results
          when: always
          command: |
# https://discuss.circleci.com/t/bizarre-workaround-needed-for-github-deployment/5152
#            git config --global -l #<= totally unnecessary, but "fixes" problem?
            git config --global user.email circleci@circleci
            git config --global user.name CircleCI
            cd ..
            git clone https://github.com/ackrep-org/ackrep_ci_results.git
            cd ackrep_ci_results
            git checkout feature_autocommit
            name=$(ls ../artifacts/ackrep_ci_results)
            cp ../artifacts/ackrep_ci_results/$name history
            git add .
            git commit -m "automatic results upload"
            git push
workflows:
  version: 2 
  build_and_test:
    jobs:
      - Validate_Data

